# SSL证书管理系统 - 使用远程数据库的Docker Compose配置
version: '3.8'

services:
  # SSL证书管理系统 - Go版本
  ssl-cert-system:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        VERSION: "1.0.0"
        BUILD_TIME: "${BUILD_TIME:-$(date -u +%Y-%m-%dT%H:%M:%SZ)}"
        GIT_COMMIT: "${GIT_COMMIT:-$(git rev-parse --short HEAD)}"
    container_name: ssl-cert-system-go
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PORT=3001
      # 远程MySQL数据库配置
      - DB_HOST=${DB_HOST:-8.134.130.92}
      - DB_PORT=${DB_PORT:-3306}
      - DB_NAME=${DB_NAME:-ssl_cert_system}
      - DB_USER=${DB_USER:-ssl_manager}
      - DB_PASSWORD=${DB_PASSWORD:-ssl_manager_password_123}
      - JWT_SECRET=${JWT_SECRET:-your_jwt_secret_key_here_change_in_production}
      - ACME_SERVER=${ACME_SERVER:-https://acme-v02.api.letsencrypt.org/directory}
      - ACME_EMAIL=${ACME_EMAIL:-your_email@domain.com}
      - ACME_STORAGE_PATH=/app/storage/certs
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - APP_VERSION=1.0.0
    volumes:
      - ssl_certs:/app/storage/certs
      - ssl_logs:/app/logs
      - /etc/localtime:/etc/localtime:ro
    networks:
      - ssl_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Nginx前端服务器
  nginx:
    image: nginx:alpine
    container_name: ssl-nginx-go
    restart: unless-stopped
    ports:
      - "${HTTP_PORT:-80}:80"
      - "${HTTPS_PORT:-443}:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./frontend/dist:/usr/share/nginx/html:ro
      - /etc/localtime:/etc/localtime:ro
      # SSL证书挂载点（如果需要HTTPS）
      - ssl_certs:/etc/nginx/certs:ro
    depends_on:
      ssl-cert-system:
        condition: service_healthy
    networks:
      - ssl_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

# Redis支持已移除 - 当前版本未实现Redis功能

volumes:
  ssl_certs:
    driver: local
  ssl_logs:
    driver: local

networks:
  ssl_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16
